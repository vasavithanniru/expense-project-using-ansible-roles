- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: 
    - nodejs
    - mysql

- name: create user
  ansible.builtin.user:
    name: expense

- name: create app dir
  ansible.builtin.file:
    path: /app
    state: directory

- name: download the backend code
  ansible.builtin.get_url:
    url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip 

- name: unzip the backend code
  ansible.builtin.unarchive:
    src: /tmp/backend.zip  #by default ansible thinks it is in ansible server, so we need to specify remote_src
    dest: /app
    remote_src: yes
    
- name: Install dependencies
  ansible.builtin.command: npm install
  args: 
    chdir: /app  

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service       

- name: ansible to install PyMySQL
  ansible.builtin.pip:
    name: 
    - PyMySQL
    - cryptography
    executable: pip3.9    

- name: load mysql schema
  community.mysql.mysql_db:  
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: "{{ mysql_IP }}"
    name: all
    state: import
    target: /app/schema/backend.sql

- name: reload the service
  ansible.builtin.systemd_service:
    name: backend
    state: restarted
    daemon_reload: true